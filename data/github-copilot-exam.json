[
    {
        "question": "Which principle is NOT part of Microsoft's Responsible AI Standard?",
        "options": [
            "Accountability",
            "Performance Optimization",
            "Reliability and Safety",
            "Inclusiveness"
        ],
        "answer": [1],
        "explanation": "Performance optimization isn't a core principle - the six pillars are Accountability, Inclusiveness, Reliability/Safety, Fairness, Transparency, and Privacy/Security."
    },
    {
        "question": "What feature is exclusive to GitHub Copilot Business?",
        "options": [
            "Code suggestions in private repos",
            "VS Code integration",
            "AI-based code completion",
            "Organization-wide policy management"
        ],
        "answer": [3],
        "explanation": "Business plan offers organization-level policy controls and license management unavailable in individual plans."
    },
    {
        "question": "When should developers manually review Copilot suggestions?",
        "options": [
            "Only for mission-critical systems",
            "When suggestions contain complex algorithms",
            "Always before accepting code",
            "When working with open-source libraries"
        ],
        "answer": [2],
        "explanation": "Microsoft recommends human review of all AI-generated code to ensure quality and security."
    },
    {
        "question": "Which bias mitigation strategy does Copilot employ?",
        "options": [
            "Output filtering for sensitive terms",
            "Complete exclusion of certain code patterns",
            "User demographic-based suggestion tailoring",
            "No specific bias mitigation measures"
        ],
        "answer": [0],
        "explanation": "Copilot filters suggestions containing known biased terms or harmful patterns."
    },
    {
        "question": "What's the primary ethical concern when using Copilot in healthcare applications?",
        "options": [
            "Code execution speed",
            "Compliance with HIPAA regulations",
            "Algorithm complexity",
            "Multilingual support"
        ],
        "answer": [1],
        "explanation": "Healthcare code must comply with privacy regulations like HIPAA, requiring special scrutiny of AI suggestions."
    },
    {
        "question": "How does Responsible AI practice affect Copilot's training data?",
        "options": [
            "Excludes all GPL-licensed code",
            "Prioritizes code from diverse contributors",
            "Uses only Microsoft-approved repositories",
            "Applies differential privacy techniques"
        ],
        "answer": [3],
        "explanation": "Differential privacy helps protect contributor anonymity while maintaining dataset utility."
    },
    {
        "question": "What should developers do when Copilot suggests outdated security practices?",
        "options": [
            "Accept since it's AI-generated",
            "Report as inappropriate content",
            "Modify to follow current standards",
            "Disable security-related suggestions"
        ],
        "answer": [2],
        "explanation": "Developers must update deprecated security patterns to current best practices."
    },
    {
        "question": "Which IDE is NOT officially supported by GitHub Copilot?",
        "options": [
            "Visual Studio Code",
            "JetBrains Rider",
            "Eclipse",
            "Neovim"
        ],
        "answer": [2],
        "explanation": "Eclipse lacks official plugin support, though community options exist."
    },
    {
        "question": "What distinguishes Copilot X from standard Copilot?",
        "options": [
            "Cloud-based execution environment",
            "Chat interface and PR explanations",
            "Support for legacy languages",
            "On-premises deployment option"
        ],
        "answer": [1],
        "explanation": "Copilot X adds conversational AI features beyond code completion."
    },
    {
        "question": "Which language has BEST support in Copilot?",
        "options": [
            "Python",
            "COBOL",
            "Assembly",
            "Smalltalk"
        ],
        "answer": [0],
        "explanation": "Python has the most training data and highest suggestion accuracy."
    },
    {
        "question": "What happens when Copilot's monthly suggestion limit is reached?",
        "options": [
            "Complete service shutdown",
            "Reduced suggestion quality",
            "Basic code completion only",
            "No effect on paid subscriptions"
        ],
        "answer": [2],
        "explanation": "Free tier users get limited functionality; paid plans have no hard limits."
    },
    {
        "question": "Where does Copilot process code context during usage?",
        "options": [
            "User's local machine only",
            "GitHub's secure cloud servers",
            "Microsoft Azure data centers",
            "Hybrid local/cloud processing"
        ],
        "answer": [2],
        "explanation": "All processing occurs in Microsoft's Azure-based secure environments."
    },
    {
        "question": "How long are code snippets retained by Copilot's systems?",
        "options": [
            "Indefinitely",
            "30 days maximum",
            "Only during active session",
            "1 year for training purposes"
        ],
        "answer": [1],
        "explanation": "Data retention policies limit storage to 30 days for non-aggregated snippets."
    },
    {
        "question": "What encryption standard protects Copilot data in transit?",
        "options": [
            "AES-128",
            "TLS 1.3",
            "RSA-2048",
            "Blowfish"
        ],
        "answer": [1],
        "explanation": "Industry-standard TLS 1.3 secures all data transmissions."
    },
    {
        "question": "Which prompt technique improves Copilot's function generation?",
        "options": [
            "Adding type hints in comments",
            "Using ALL CAPS for keywords",
            "Including negative examples",
            "Writing prompts in multiple languages"
        ],
        "answer": [0],
        "explanation": "Type hints provide critical context for generating type-safe code."
    },
    {
        "question": "What's the optimal context length for complex prompts?",
        "options": [
            "1-2 lines",
            "3-5 lines",
            "Exactly 50 words",
            "As much relevant context as needed"
        ],
        "answer": [3],
        "explanation": "Copilot can utilize extensive context from open files for better suggestions."
    },
    {
        "question": "Which comment format triggers Copilot most effectively?",
        "options": [
            "// TODO: Implement login validation",
            "# [FIXME] - broken auth flow",
            "/* NEED: Password strength checker */",
            "All work equally well"
        ],
        "answer": [3],
        "explanation": "Copilot recognizes various comment conventions without preference."
    },
    {
        "question": "When is Copilot LEAST effective?",
        "options": [
            "Writing boilerplate CRUD operations",
            "Generating test cases for edge scenarios",
            "Implementing novel research algorithms",
            "Documenting API endpoints"
        ],
        "answer": [2],
        "explanation": "Truly innovative solutions lack training patterns for accurate suggestions."
    },
    {
        "question": "Which task shows highest productivity gains with Copilot?",
        "options": [
            "Debugging race conditions",
            "Writing documentation comments",
            "Performance optimization",
            "Cloud infrastructure design"
        ],
        "answer": [1],
        "explanation": "Studies show 55%+ productivity gains for documentation tasks."
    },
    {
        "question": "How should developers validate Copilot-generated tests?",
        "options": [
            "Trust without verification",
            "Check coverage metrics only",
            "Execute tests and inspect logic",
            "Use mutation testing tools"
        ],
        "answer": [2],
        "explanation": "All AI-generated code requires human validation, especially test logic."
    },
    {
        "question": "Which test type does Copilot struggle with most?",
        "options": [
            "Unit tests",
            "Integration tests",
            "UI snapshot tests",
            "Concurrency stress tests"
        ],
        "answer": [3],
        "explanation": "Complex concurrency scenarios require human expertise for reliable testing."
    },
    {
        "question": "Which codebase elements does Copilot NEVER use?",
        "options": [
            "Public GPL repositories",
            "Private enterprise code",
            "GitHub's internal projects",
            "Code from blocked users"
        ],
        "answer": [1],
        "explanation": "Private code is excluded from training data per privacy guarantees."
    },
    {
        "question": "How does Copilot handle credentials in suggestions?",
        "options": [
            "Automatically generates secure credentials",
            "Redacts potential secrets with asterisks",
            "Flags suggestions containing 'password'",
            "No special handling - developer responsibility"
        ],
        "answer": [2],
        "explanation": "Copilot includes warning systems for common security-sensitive patterns."
    },
    {
        "question": "Which compliance standard does Copilot NOT currently meet?",
        "options": [
            "GDPR",
            "CCPA",
            "HIPAA",
            "SOC 2 Type 2"
        ],
        "answer": [2],
        "explanation": "Healthcare compliance requires specialized certifications not yet achieved."
    },
    {
        "question": "What user data is shared with repository maintainers?",
        "options": [
            "Individual usage statistics",
            "Code snippets from private repos",
            "Aggregated suggestion acceptance rates",
            "Nothing beyond standard GitHub metrics"
        ],
        "answer": [3],
        "explanation": "Maintainers only see standard GitHub analytics, not Copilot-specific data."
    },
    {
        "question": "Which Microsoft framework guides Copilot's ethical development?",
        "options": [
            "Azure Responsible Principles",
            "AI Development Charter",
            "Responsible AI Standard",
            "Ethical Engineering Framework"
        ],
        "answer": [2],
        "explanation": "Microsoft's Responsible AI Standard provides the governance framework for all AI products including Copilot."
    },
    {
        "question": "What should developers verify before using Copilot-generated security code?",
        "options": [
            "Code execution speed",
            "Compliance with OWASP Top 10",
            "Number of code suggestions",
            "IDE compatibility"
        ],
        "answer": [1],
        "explanation": "Security-critical code must be manually validated against current standards like OWASP Top 10."
    },
    {
        "question": "Which bias mitigation technique does Copilot employ?",
        "options": [
            "Demographic-based suggestion filtering",
            "Output scanning for discriminatory patterns",
            "User identity-based model adjustment",
            "Complete exclusion of sensitive topics"
        ],
        "answer": [1],
        "explanation": "Copilot scans suggestions for potentially biased language patterns based on predefined filters."
    },
    {
        "question": "How should Copilot be used in life-critical systems?",
        "options": [
            "As primary code author",
            "With enhanced human oversight",
            "Only for documentation",
            "Disabled entirely"
        ],
        "answer": [1],
        "explanation": "Critical systems require rigorous human review of all AI-generated code."
    },
    {
        "question": "What's the primary ethical risk when using Copilot for legal compliance code?",
        "options": [
            "Outdated regulatory references",
            "Slow execution speed",
            "Language limitations",
            "Inconsistent indentation"
        ],
        "answer": [0],
        "explanation": "Legal compliance code may reference outdated regulations if training data isn't current."
    },
    {
        "question": "Which principle ensures Copilot doesn't perpetuate harmful stereotypes?",
        "options": [
            "Performance efficiency",
            "Fairness",
            "Scalability",
            "Interoperability"
        ],
        "answer": [1],
        "explanation": "Fairness is a core Responsible AI principle preventing biased outputs."
    },
    {
        "question": "How often should teams review Copilot usage guidelines?",
        "options": [
            "Annually",
            "Only during onboarding",
            "Quarterly",
            "Never after initial setup"
        ],
        "answer": [2],
        "explanation": "Quarterly reviews ensure alignment with evolving AI ethics standards."
    },
    {
        "question": "What should you do if Copilot suggests code with known vulnerabilities?",
        "options": [
            "Accept and deploy",
            "Modify to secure standards",
            "Report as inappropriate",
            "Disable security features"
        ],
        "answer": [1],
        "explanation": "Developers must update vulnerable patterns to current security standards."
    },
    {
        "question": "Which team role is responsible for Copilot oversight?",
        "options": [
            "Only individual developers",
            "Security team exclusively",
            "Cross-functional team",
            "External auditors only"
        ],
        "answer": [2],
        "explanation": "Responsible AI requires collaboration across development, security, and legal teams."
    },
    {
        "question": "How does Microsoft ensure Copilot's training data diversity?",
        "options": [
            "Exclusively Microsoft-owned code",
            "Prioritizing trending repositories",
            "Global source inclusion",
            "Manual contributor selection"
        ],
        "answer": [2],
        "explanation": "Training data includes globally diverse public repositories to reduce bias."
    },
    {
        "question": "What documentation should accompany Copilot-generated code?",
        "options": [
            "No special documentation",
            "AI generation disclaimer",
            "Full training data sources",
            "Model architecture details"
        ],
        "answer": [1],
        "explanation": "Transparency requires noting AI assistance in code documentation."
    },
    {
        "question": "Which scenario requires Copilot disablement?",
        "options": [
            "Working with personal data",
            "Developing open-source projects",
            "Violating ethical guidelines",
            "Using unsupported languages"
        ],
        "answer": [2],
        "explanation": "Immediate disablement is required when ethical boundaries are crossed."
    },
    {
        "question": "How does Copilot handle culturally specific terminology?",
        "options": [
            "Localization plugins",
            "Context-based filtering",
            "User preference settings",
            "Complete exclusion"
        ],
        "answer": [1],
        "explanation": "Context-aware filters adapt suggestions to cultural contexts."
    },
    {
        "question": "What's the first step when identifying biased Copilot output?",
        "options": [
            "Retrain local model",
            "Report via official channels",
            "Modify company policies",
            "Disable suggestion feature"
        ],
        "answer": [1],
        "explanation": "Bias incidents should be reported to GitHub for model improvement."
    },
    {
        "question": "Which compliance framework influences Copilot's development?",
        "options": [
            "PCI DSS",
            "NIST AI RMF",
            "HIPAA Security Rule",
            "GDPR Article 22"
        ],
        "answer": [1],
        "explanation": "NIST AI Risk Management Framework guides responsible development."
    },
    {
        "question": "Which feature is exclusive to Copilot Enterprise?",
        "options": [
            "VS Code integration",
            "Custom model fine-tuning",
            "VPN-based security scanning",
            "On-premises deployment"
        ],
        "answer": [3],
        "explanation": "Enterprise plan offers air-gapped deployment for regulated industries."
    },
    {
        "question": "What language coverage does Copilot NOT guarantee?",
        "options": [
            "Python",
            "JavaScript",
            "COBOL",
            "TypeScript"
        ],
        "answer": [2],
        "explanation": "Legacy languages like COBOL have limited support due to training data availability."
    },
    {
        "question": "Which IDE supports Copilot's inline chat?",
        "options": [
            "Eclipse",
            "IntelliJ IDEA",
            "Visual Studio",
            "PyCharm"
        ],
        "answer": [2],
        "explanation": "Visual Studio has full Copilot X integration with inline chat features."
    },
    {
        "question": "What differentiates Copilot Business from Individual?",
        "options": [
            "Code completion speed",
            "Organization policy controls",
            "Language support",
            "Cloud integration"
        ],
        "answer": [1],
        "explanation": "Business plan adds policy management for license compliance and security."
    },
    {
        "question": "Which feature is part of Copilot X?",
        "options": [
            "Voice-to-code",
            "PR description generation",
            "Offline mode",
            "Hardware acceleration"
        ],
        "answer": [1],
        "explanation": "Copilot X can automatically generate pull request descriptions."
    },
    {
        "question": "How does Copilot for CLI assist developers?",
        "options": [
            "Generates shell commands",
            "Optimizes container images",
            "Manages cloud credentials",
            "Monitors network traffic"
        ],
        "answer": [0],
        "explanation": "Copilot for CLI suggests relevant shell commands based on context."
    },
    {
        "question": "Which Copilot feature reduces boilerplate code?",
        "options": [
            "Code explanations",
            "Fill-in-the-middle",
            "Voice programming",
            "Test generation"
        ],
        "answer": [1],
        "explanation": "Fill-in-the-middle generates code between existing code blocks."
    },
    {
        "question": "What's Copilot's maximum context window?",
        "options": [
            "512 tokens",
            "2048 tokens",
            "4096 tokens",
            "8192 tokens"
        ],
        "answer": [2],
        "explanation": "Copilot processes up to 4096 tokens of context for suggestions."
    },
    {
        "question": "Which Copilot feature helps with unfamiliar codebases?",
        "options": [
            "Code explanations",
            "Test generation",
            "Performance profiling",
            "Security scanning"
        ],
        "answer": [0],
        "explanation": "/explain command provides natural language explanations of code."
    },
    {
        "question": "How does Copilot support pair programming?",
        "options": [
            "Real-time collaboration",
            "Voice chat integration",
            "Multi-cursor support",
            "Shared suggestion history"
        ],
        "answer": [0],
        "explanation": "Copilot Live enables real-time collaborative editing."
    },
    {
        "question": "Which framework has best Copilot support?",
        "options": [
            "Angular",
            "Spring Boot",
            "Ruby on Rails",
            "Django"
        ],
        "answer": [3],
        "explanation": "Django has extensive training data and pattern recognition."
    },
    {
        "question": "What's Copilot's response time SLA for Business tier?",
        "options": [
            "No SLA",
            "99.5% uptime",
            "99.9% uptime",
            "100% availability"
        ],
        "answer": [2],
        "explanation": "Business plan includes 99.9% uptime SLA."
    },
    {
        "question": "Which Copilot feature assists with cloud infrastructure?",
        "options": [
            "Terraform suggestions",
            "Cost optimization",
            "Security compliance",
            "Network diagrams"
        ],
        "answer": [0],
        "explanation": "Copilot suggests Terraform configurations based on comments."
    },
    {
        "question": "How does Copilot handle unsupported languages?",
        "options": [
            "Full functionality",
            "Basic syntax completion",
            "Complete disablement",
            "External plugin requirement"
        ],
        "answer": [1],
        "explanation": "Limited syntax-based completion is available for unsupported languages."
    },
    {
        "question": "Which Copilot feature prevents license violations?",
        "options": [
            "Code referencing",
            "License filtering",
            "Snippet watermarking",
            "Compliance scanning"
        ],
        "answer": [1],
        "explanation": "License filtering blocks suggestions matching restricted licenses."
    },
    {
        "question": "How does Copilot handle code from private repositories?",
        "options": [
            "Uses it for model training",
            "Stores snippets for 90 days",
            "Never sends it to servers",
            "Excludes it from processing"
        ],
        "answer": [3],
        "explanation": "Private repo code is excluded from training data per GitHub's data policies."
    },
    {
        "question": "What encryption protects Copilot data at rest?",
        "options": [
            "AES-128",
            "RSA-4096",
            "AES-256",
            "Twofish"
        ],
        "answer": [2],
        "explanation": "Enterprise-grade AES-256 encryption secures all stored data."
    },
    {
        "question": "Where is Copilot user data processed?",
        "options": [
            "User's local machine",
            "GitHub servers",
            "Microsoft Azure data centers",
            "Hybrid edge locations"
        ],
        "answer": [2],
        "explanation": "All processing occurs in Microsoft Azure data centers."
    },
    {
        "question": "How long are prompts retained?",
        "options": [
            "30 days",
            "6 months",
            "1 year",
            "Indefinitely"
        ],
        "answer": [0],
        "explanation": "Prompts are deleted after 30 days per data retention policy."
    },
    {
        "question": "What data is included in telemetry?",
        "options": [
            "Full code snippets",
            "Acceptance rates",
            "User credentials",
            "File contents"
        ],
        "answer": [1],
        "explanation": "Aggregated acceptance rates are collected, not individual code snippets."
    },
    {
        "question": "How does Copilot ensure training data freshness?",
        "options": [
            "Monthly retraining",
            "Continuous updates",
            "Quarterly updates",
            "Annual refreshes"
        ],
        "answer": [1],
        "explanation": "Models are continuously updated with new public repositories."
    },
    {
        "question": "What is Copilot's data residency policy?",
        "options": [
            "US-only storage",
            "User-selectable regions",
            "Global distribution",
            "EU-only option"
        ],
        "answer": [1],
        "explanation": "Enterprise plans allow selecting data residency regions."
    },
    {
        "question": "How are data breaches handled?",
        "options": [
            "72-hour notification",
            "Internal investigation only",
            "User credit monitoring",
            "Service credit issuance"
        ],
        "answer": [0],
        "explanation": "GDPR requires notification within 72 hours of breach discovery."
    },
    {
        "question": "What data minimization technique does Copilot use?",
        "options": [
            "Full context retention",
            "Selective snippet extraction",
            "No minimization",
            "Data anonymization"
        ],
        "answer": [1],
        "explanation": "Only relevant code snippets are processed, not entire files."
    },
    {
        "question": "How does Copilot handle GDPR deletion requests?",
        "options": [
            "Full model retraining",
            "Snippet deletion",
            "User opt-out",
            "Data anonymization"
        ],
        "answer": [1],
        "explanation": "Dedicated pipelines remove user-specific data snippets."
    },
    {
        "question": "Which compliance standard does Copilot meet?",
        "options": [
            "HIPAA",
            "SOC 2 Type 2",
            "PCI DSS",
            "FERPA"
        ],
        "answer": [1],
        "explanation": "Copilot is SOC 2 Type 2 compliant for security controls."
    },
    {
        "question": "What is Copilot's data processing agreement?",
        "options": [
            "Standard EULA",
            "Customizable DPA",
            "No separate agreement",
            "Industry template"
        ],
        "answer": [1],
        "explanation": "Enterprise customers can customize Data Processing Agreements."
    },
    {
        "question": "How is training data anonymized?",
        "options": [
            "Full metadata removal",
            "Differential privacy",
            "Pseudonymization",
            "Tokenization"
        ],
        "answer": [1],
        "explanation": "Differential privacy techniques protect contributor anonymity."
    },
    {
        "question": "What data is never used for training?",
        "options": [
            "Public repositories",
            "Private repositories",
            "GitHub issues",
            "Stack Overflow"
        ],
        "answer": [1],
        "explanation": "Private repository code is excluded from training datasets."
    },
    {
        "question": "How does Copilot prevent data leakage?",
        "options": [
            "No network access",
            "Input sanitization",
            "Output filtering",
            "Environment isolation"
        ],
        "answer": [2],
        "explanation": "Output filters prevent suggestions containing sensitive patterns."
    },
    {
        "question": "Which prompt technique improves API documentation?",
        "options": [
            "Adding @swagger annotations",
            "Writing prompts in uppercase",
            "Including error examples",
            "Using non-English languages"
        ],
        "answer": [0],
        "explanation": "Annotation-based hints guide documentation generation."
    },
    {
        "question": "What's optimal for database migration prompts?",
        "options": [
            "Single-word 'migration'",
            "Schema version comparison",
            "Sample ORM models",
            "SQL dialect specification"
        ],
        "answer": [1],
        "explanation": "Version context enables accurate migration scripts."
    },
    {
        "question": "How to generate Python type hints?",
        "options": [
            "# Type annotated function",
            "def function() -> None:",
            "Include type examples",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Multiple techniques improve type hint generation."
    },
    {
        "question": "What prompt structure improves test generation?",
        "options": [
            "// Test for null input",
            "Describe edge cases first",
            "Provide sample inputs",
            "Specify test framework"
        ],
        "answer": [2],
        "explanation": "Concrete examples yield better parameterized tests."
    },
    {
        "question": "How to handle ambiguous prompts?",
        "options": [
            "Rephrase precisely",
            "Add more adjectives",
            "Switch languages",
            "Use shorter prompts"
        ],
        "answer": [0],
        "explanation": "Precise rephrasing clarifies requirements for Copilot."
    },
    {
        "question": "Which technique reduces hallucination?",
        "options": [
            "Vague requirements",
            "Concrete examples",
            "Abstract descriptions",
            "Minimal context"
        ],
        "answer": [1],
        "explanation": "Concrete examples ground suggestions in reality."
    },
    {
        "question": "What improves React component suggestions?",
        "options": [
            "JSX comments",
            "PropType definitions",
            "Component skeletons",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Multiple context cues enhance component generation."
    },
    {
        "question": "How to generate data transformation code?",
        "options": [
            "Input/output examples",
            "Abstract specifications",
            "Function names only",
            "Library references"
        ],
        "answer": [0],
        "explanation": "Concrete input/output pairs yield accurate transformations."
    },
    {
        "question": "What prompt element helps with error handling?",
        "options": [
            "// Handle exceptions",
            "try-catch structure",
            "Specific error types",
            "All are effective"
        ],
        "answer": [3],
        "explanation": "Various techniques improve error handling suggestions."
    },
    {
        "question": "How to optimize algorithm prompts?",
        "options": [
            "Name the algorithm",
            "Specify time complexity",
            "Provide sample inputs",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Combined constraints yield optimal algorithm implementations."
    },
    {
        "question": "What improves localization code?",
        "options": [
            "Specify languages",
            "Include locale examples",
            "Reference i18n libraries",
            "All are useful"
        ],
        "answer": [3],
        "explanation": "Multiple localization cues enhance suggestions."
    },
    {
        "question": "How to generate secure password handling?",
        "options": [
            "// Secure password storage",
            "Specify hashing algorithm",
            "Include salt parameter",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Explicit security requirements improve implementations."
    },
    {
        "question": "What prompt technique improves Dockerfiles?",
        "options": [
            "Specify base image",
            "List dependencies",
            "Define build stages",
            "All are effective"
        ],
        "answer": [3],
        "explanation": "Multiple Docker-specific cues enhance generation."
    },
    {
        "question": "How to handle API versioning prompts?",
        "options": [
            "Specify version number",
            "Include deprecation policy",
            "Reference changelog",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Comprehensive versioning context improves suggestions."
    },
    {
        "question": "What reduces duplicate suggestions?",
        "options": [
            "Provide more context",
            "Use unique function names",
            "Break into smaller prompts",
            "All are effective"
        ],
        "answer": [3],
        "explanation": "Multiple techniques reduce suggestion duplication."
    },
    {
        "question": "Where is Copilot LEAST effective?",
        "options": [
            "Boilerplate CRUD code",
            "Novel research algorithms",
            "API documentation",
            "Test data generation"
        ],
        "answer": [1],
        "explanation": "Truly innovative algorithms lack training patterns."
    },
    {
        "question": "Which task shows highest productivity gains?",
        "options": [
            "Debugging race conditions",
            "Writing documentation",
            "Performance optimization",
            "Cloud architecture"
        ],
        "answer": [1],
        "explanation": "Studies show 55%+ efficiency in documentation tasks."
    },
    {
        "question": "How does Copilot accelerate onboarding?",
        "options": [
            "Codebase explanations",
            "Test generation",
            "Environment setup",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Multiple features accelerate new developer onboarding."
    },
    {
        "question": "What's the best use in legacy migration?",
        "options": [
            "Automatic translation",
            "Code explanations",
            "Test coverage",
            "All are valuable"
        ],
        "answer": [3],
        "explanation": "All features assist in legacy system modernization."
    },
    {
        "question": "How does Copilot help with code reviews?",
        "options": [
            "Automated approval",
            "Vulnerability detection",
            "Complexity analysis",
            "All of the above"
        ],
        "answer": [1],
        "explanation": "Security vulnerability detection is a key review benefit."
    },
    {
        "question": "What's optimal for infrastructure-as-code?",
        "options": [
            "Terraform suggestions",
            "CloudFormation templates",
            "ARM template generation",
            "All are supported"
        ],
        "answer": [3],
        "explanation": "Copilot supports major IaC frameworks."
    },
    {
        "question": "How to use Copilot for accessibility?",
        "options": [
            "a11y lint rules",
            "Screen reader patterns",
            "WCAG compliance checks",
            "All are effective"
        ],
        "answer": [3],
        "explanation": "Multiple accessibility use cases are supported."
    },
    {
        "question": "What's the best API development use?",
        "options": [
            "Endpoint skeletons",
            "Swagger documentation",
            "Mock server generation",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Copilot assists throughout API development lifecycle."
    },
    {
        "question": "How does Copilot assist debugging?",
        "options": [
            "Automatic fix suggestions",
            "Error explanations",
            "Stack trace analysis",
            "All are helpful"
        ],
        "answer": [3],
        "explanation": "Multiple debugging assistance features exist."
    },
    {
        "question": "What's the best data science use?",
        "options": [
            "Novel algorithm development",
            "Data visualization code",
            "Hyperparameter tuning",
            "Model architecture design"
        ],
        "answer": [1],
        "explanation": "Visualization code generation shows strong results."
    },
    {
        "question": "How to use Copilot for CI/CD?",
        "options": [
            "Pipeline configuration",
            "Test automation",
            "Deployment scripts",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "End-to-end CI/CD automation support."
    },
    {
        "question": "What's the best documentation use?",
        "options": [
            "README generation",
            "API references",
            "Inline comments",
            "All are effective"
        ],
        "answer": [3],
        "explanation": "Comprehensive documentation support."
    },
    {
        "question": "How does Copilot help with technical debt?",
        "options": [
            "Automatic refactoring",
            "Code smell detection",
            "Modernization patterns",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Multiple technical debt reduction features."
    },
    {
        "question": "What's the best use for DevOps?",
        "options": [
            "Infrastructure coding",
            "Monitoring configuration",
            "Incident runbooks",
            "All are valuable"
        ],
        "answer": [3],
        "explanation": "Comprehensive DevOps support across domains."
    },
    {
        "question": "How to use Copilot for security?",
        "options": [
            "Secure code patterns",
            "Vulnerability scanning",
            "Compliance checks",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "End-to-end security assistance features."
    },
    {
        "question": "How to validate Copilot-generated tests?",
        "options": [
            "Trust without verification",
            "Execute and inspect",
            "Coverage metrics only",
            "Mutation testing"
        ],
        "answer": [1],
        "explanation": "Human verification of test logic is essential."
    },
    {
        "question": "Which test type is most challenging?",
        "options": [
            "Unit tests",
            "Integration tests",
            "Concurrency tests",
            "Snapshot tests"
        ],
        "answer": [2],
        "explanation": "Concurrency requires human expertise for reliability."
    },
    {
        "question": "What improves parameterized test generation?",
        "options": [
            "Input boundaries",
            "Edge case examples",
            "Expected outputs",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Comprehensive constraints yield better tests."
    },
    {
        "question": "How to generate UI component tests?",
        "options": [
            "Component props",
            "User interaction sequences",
            "Accessibility requirements",
            "All are useful"
        ],
        "answer": [3],
        "explanation": "Multiple context cues enhance UI tests."
    },
    {
        "question": "What's essential for API test generation?",
        "options": [
            "Endpoint definitions",
            "Sample payloads",
            "Status codes",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Comprehensive API context improves tests."
    },
    {
        "question": "How to test AI-generated algorithms?",
        "options": [
            "Boundary value analysis",
            "Fuzz testing",
            "Complexity verification",
            "All are essential"
        ],
        "answer": [3],
        "explanation": "Rigorous testing is critical for algorithms."
    },
    {
        "question": "What test metric should be monitored?",
        "options": [
            "Suggestion acceptance rate",
            "Generated test coverage",
            "Defect escape rate",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Multiple quality metrics should be tracked."
    },
    {
        "question": "How to handle flaky test suggestions?",
        "options": [
            "Increase timeout",
            "Add retry logic",
            "Refactor determinism",
            "All are solutions"
        ],
        "answer": [3],
        "explanation": "Multiple approaches address flaky tests."
    },
    {
        "question": "What improves database test generation?",
        "options": [
            "Schema definitions",
            "Seed data",
            "Isolation techniques",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Comprehensive database context improves tests."
    },
    {
        "question": "How to verify security tests?",
        "options": [
            "OWASP references",
            "Penetration validation",
            "Vulnerability scanning",
            "All are essential"
        ],
        "answer": [3],
        "explanation": "Security tests require multi-layered validation."
    },
    {
        "question": "What's the best test naming practice?",
        "options": [
            "Accept generated names",
            "Enforce naming conventions",
            "Use descriptive phrases",
            "All are valid"
        ],
        "answer": [1],
        "explanation": "Consistent naming conventions improve maintainability."
    },
    {
        "question": "How to generate performance tests?",
        "options": [
            "Specify load parameters",
            "Define SLA requirements",
            "Include resource metrics",
            "All are necessary"
        ],
        "answer": [3],
        "explanation": "Comprehensive performance context improves tests."
    },
    {
        "question": "What test data strategy works best?",
        "options": [
            "Production data copies",
            "Synthetic data generation",
            "Masked sensitive data",
            "All have tradeoffs"
        ],
        "answer": [3],
        "explanation": "Different strategies suit different contexts."
    },
    {
        "question": "How to handle test maintenance?",
        "options": [
            "Accept all updates",
            "Manual review changes",
            "Version-controlled approvals",
            "All are approaches"
        ],
        "answer": [1],
        "explanation": "Human review of test changes is essential."
    },
    {
        "question": "What's the test generation success metric?",
        "options": [
            "Lines of test code",
            "Defect detection rate",
            "Developer time saved",
            "All are valuable"
        ],
        "answer": [3],
        "explanation": "Multiple metrics measure testing success."
    },
    {
        "question": "How does Copilot handle GDPR deletion?",
        "options": [
            "Full retraining",
            "Snippet removal",
            "User opt-out",
            "Anonymization"
        ],
        "answer": [1],
        "explanation": "Dedicated pipelines remove user-specific data."
    },
    {
        "question": "Which compliance does Copilot for Business support?",
        "options": [
            "HIPAA",
            "PCI DSS",
            "ISO 27001",
            "FERPA"
        ],
        "answer": [2],
        "explanation": "Enterprise supports ISO 27001 security standard."
    },
    {
        "question": "How are secrets prevented in suggestions?",
        "options": [
            "Pattern detection",
            "Local processing only",
            "Manual filters",
            "No prevention"
        ],
        "answer": [0],
        "explanation": "Secret pattern detection blocks sensitive suggestions."
    },
    {
        "question": "What's Copilot's data minimization approach?",
        "options": [
            "Full file processing",
            "Relevant snippet extraction",
            "No minimization",
            "Metadata-only"
        ],
        "answer": [1],
        "explanation": "Only relevant code snippets are processed."
    },
    {
        "question": "How long is telemetry retained?",
        "options": [
            "30 days",
            "6 months",
            "1 year",
            "18 months"
        ],
        "answer": [0],
        "explanation": "Telemetry deleted after 30 days per policy."
    },
    {
        "question": "What privacy certification does Copilot hold?",
        "options": [
            "ISO 27701",
            "SOC 3",
            "HIPAA",
            "PCI DSS"
        ],
        "answer": [0],
        "explanation": "ISO 27701 certifies privacy information management."
    },
    {
        "question": "How are third-party audits handled?",
        "options": [
            "Annual independent audits",
            "Internal assessments only",
            "User-conducted audits",
            "No audit program"
        ],
        "answer": [0],
        "explanation": "Independent annual audits validate compliance."
    },
    {
        "question": "What's included in Data Subject Requests?",
        "options": [
            "Training data sources",
            "Personal data inventory",
            "Model parameters",
            "Suggestion history"
        ],
        "answer": [1],
        "explanation": "Personal data inventories fulfill DSAR requirements."
    },
    {
        "question": "How is PII protected?",
        "options": [
            "Automatic redaction",
            "Exclusion from processing",
            "Encryption at rest",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Multi-layered PII protection measures."
    },
    {
        "question": "What's the breach notification timeframe?",
        "options": [
            "24 hours",
            "72 hours",
            "7 days",
            "30 days"
        ],
        "answer": [1],
        "explanation": "GDPR requires 72-hour breach notification."
    },
    {
        "question": "How is data sovereignty ensured?",
        "options": [
            "US-only storage",
            "Regional data centers",
            "Client-controlled storage",
            "No guarantees"
        ],
        "answer": [2],
        "explanation": "Enterprise allows customer-controlled data residency."
    },
    {
        "question": "What privacy-by-design principle is implemented?",
        "options": [
            "Data maximization",
            "Default privacy settings",
            "Delayed compliance",
            "Reactive protection"
        ],
        "answer": [1],
        "explanation": "Privacy-enhancing default settings."
    },
    {
        "question": "How are subcontractors monitored?",
        "options": [
            "Regular security assessments",
            "No subcontractors used",
            "Annual self-attestation",
            "Continuous monitoring"
        ],
        "answer": [0],
        "explanation": "Regular third-party security assessments."
    },
    {
        "question": "What's the data retention exception?",
        "options": [
            "Legal requirements",
            "Product improvement",
            "Bug investigations",
            "All of the above"
        ],
        "answer": [3],
        "explanation": "Multiple exceptions extend retention periods."
    },
    {
        "question": "How is training data licensed?",
        "options": [
            "Public domain",
            "MIT license",
            "Original licenses",
            "Microsoft proprietary"
        ],
        "answer": [2],
        "explanation": "Original licenses govern training data use."
    }
]